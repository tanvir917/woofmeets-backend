// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum loginProvider {
  LOCAL
  FACEBOOK
  GOOGLE
}

enum otpType {
  EMAIL
  PHONE
}

enum otpGenerationType {
  FORGET_PASSWORD
  PHONE_VERIFICATION
  APPOINTMENT
}

enum petTypeEnum {
  DOG
  CAT
  ANY
}

enum backGroundCheckEnum {
  NONE
  BASIC
  ENHANCE
}

enum optionTypeEnum {
  CHECKBOX
  RADIO
  TEXT
}

enum subscriptionTypeEnum {
  BASIC
  GOLD
  PLATINUM
}

enum havePetsEnum {
  NOT_SELECTED
  YES
  NO
}

enum homeTypeEnum {
  NOT_SELECTED
  HOUSE
  APARTMENT
  FARM
}

enum yardTypeEnum {
  NOT_SELECTED
  FENCED
  UNFENCED
  NO_YARD
}

enum genderTypeEnum {
  MALE
  FEMALE
}

enum weightTypeEnum {
  KG
  LBS
}

enum friendlyTypeEnum {
  YES
  NO
  UNSURE
  DEPENDS
}

enum energyLevelTypeEnum {
  HIGH
  MODERATE
  LOW
}

enum userSubscriptionStatusEnum {
  ACTIVE
  INACTIVE
  ENDED
  CANCELLED
}

model User {
  id                        BigInt                     @id @default(autoincrement())
  opk                       String                     @unique
  email                     String                     @unique
  emailVerified             Boolean?                   @default(true)
  firstName                 String
  lastName                  String
  password                  String?
  zipcode                   String?
  image                     Json?
  loginProvider             loginProvider
  timezone                  String?
  facebook                  String?
  google                    Boolean?
  meta                      Json?
  contact                   UserContact?
  emergencyContact          UserEmergencyContact?
  createdAt                 DateTime                   @default(now()) @db.Timestamptz(3)
  updatedAt                 DateTime?                  @updatedAt @db.Timestamptz(3)
  deletedAt                 DateTime?                  @db.Timestamptz(3)
  provider                  Provider?
  basicInfo                 BasicInfo?
  userEmergencyContactId    Int?
  Otp                       Otp[]
  Gallery                   Gallery[]
  pet                       Pet[]
  userStripeCustomerAccount UserStripeCustomerAccount?
  userStripeCard            UserStripeCard[]
  userSubscriptions         UserSubscriptions[]
  userSubscriptionInvoices  UserSubscriptionInvoices[]
  Unavailability            Unavailability[]
}

model UserContact {
  id         Int       @id @default(autoincrement())
  phone      String    @unique
  userId     BigInt    @unique
  user       User      @relation(fields: [userId], references: [id])
  verifiedAt DateTime? @db.Timestamptz(3)
  createdAt  DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime? @updatedAt @db.Timestamptz(3)
}

model UserEmergencyContact {
  id         Int       @id @default(autoincrement())
  name       String?
  phone      String?
  email      String?
  userId     BigInt    @unique
  user       User      @relation(fields: [userId], references: [id])
  verifiedAt DateTime? @db.Timestamptz(3)
  createdAt  DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime? @updatedAt @db.Timestamptz(3)
}

model Country {
  id             Int              @id @default(autoincrement())
  name           String
  code           String
  currency       String?
  currencyCode   String?
  exchangeRate   Float?
  alpha2         String?
  alpha3         String?
  meta           Json?
  createdAt      DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime?        @updatedAt @db.Timestamptz(3)
  deletedAt      DateTime?        @db.Timestamptz(3)
  basicInfo      BasicInfo[]
  userStripeCard UserStripeCard[]
}

model ServiceType {
  id                              Int                   @id @default(autoincrement())
  name                            String
  displayName                     String
  slug                            String                @unique
  description                     String?
  shortDescription                String?
  icon                            String
  active                          Boolean               @default(true)
  location                        String?
  petType                         petTypeEnum           @default(ANY)
  browsable                       Boolean               @default(true)
  start_date_selector_description String?
  end_date_selector_description   String?
  appRequired                     Boolean               @default(false)
  sequence                        Int?
  meta                            Json?
  createdAt                       DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt                       DateTime?             @updatedAt @db.Timestamptz(3)
  deletedAt                       DateTime?             @db.Timestamptz(3)
  providerServices                ProviderServices[]
  serviceTypeHasRate              ServiceTypeHasRates[]
}

model Provider {
  id                   BigInt                @id @default(autoincrement())
  userId               BigInt                @unique
  user                 User                  @relation(fields: [userId], references: [id])
  slug                 String                @unique
  isApproved           Boolean               @default(false)
  havePets             havePetsEnum          @default(NOT_SELECTED)
  subscriptionType     subscriptionTypeEnum  @default(BASIC)
  quizPassed           Boolean               @default(false)
  photoSubmitted       Boolean               @default(false)
  backGroundCheck      backGroundCheckEnum   @default(NONE)
  latitude             Float?
  longitude            Float?
  homeType             homeTypeEnum          @default(NOT_SELECTED)
  yardType             yardTypeEnum          @default(NOT_SELECTED)
  cancellationPolicyId Int?
  cancellationPolicy   CancellationPolicy?   @relation(fields: [cancellationPolicyId], references: [id])
  meta                 Json?
  createdAt            DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime?             @updatedAt @db.Timestamptz(3)
  deletedAt            DateTime?             @db.Timestamptz(3)
  providerServices     ProviderServices[]
  providerDetails      ProviderDetails?
  ServicePetPreference ServicePetPreference?
  HomeAttributes       HomeAttributes[]
}

model ProviderServices {
  id                     BigInt            @id @default(autoincrement())
  serviceTypeId          Int
  serviceType            ServiceType       @relation(fields: [serviceTypeId], references: [id])
  providerId             BigInt
  provider               Provider          @relation(fields: [providerId], references: [id])
  slug                   String            @unique
  isActive               Boolean           @default(true)
  isAway                 Boolean           @default(false)
  acceptsNewAppointments Boolean           @default(true)
  acceptsNewCustomers    Boolean           @default(true)
  isApproved             Boolean           @default(true)
  logStay                Boolean           @default(true)
  meta                   Json?
  createdAt              DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt              DateTime?         @db.Timestamptz(3)
  ServiceHasRates        ServiceHasRates[]
  pottyBreak             String?
  advanceNotice          Int               @default(0)
  fulltime               Boolean           @default(true)
  radius                 Int               @default(10)
  AvailableDay           AvailableDay[]
  Unavailabilty          Unavailability[]
}

model BasicInfo {
  id               BigInt    @id @default(autoincrement())
  userId           BigInt    @unique
  user             User      @relation(fields: [userId], references: [id])
  dob              DateTime  @db.Date
  addressLine1     String
  addressLine2     String?
  street           String?
  city             String
  state            String
  zipCode          String
  countryId        Int
  country          Country   @relation(fields: [countryId], references: [id])
  latitude         Float?    @default(0)
  longitude        Float?    @default(0)
  detailsSubmitted Boolean   @default(false)
  meta             Json?
  createdAt        DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt        DateTime? @db.Timestamptz(3)
}

model ProviderDetails {
  id                     BigInt    @id @default(autoincrement())
  providerId             BigInt    @unique
  provider               Provider  @relation(fields: [providerId], references: [id])
  headline               String
  yearsOfExperience      Float
  dogsExperience         String?
  walkingExperience      String?
  requestedDogInfo       String?
  experienceDescription  String
  environmentDescription String
  scheduleDescription    String
  detailsSubmitted       Boolean   @default(false)
  meta                   Json?
  createdAt              DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt              DateTime? @db.Timestamptz(3)
}

model Otp {
  id             BigInt            @id @default(autoincrement())
  recipient      String
  code           String
  type           otpType
  generationType otpGenerationType
  expireAt       DateTime          @db.Timestamptz(3)
  invalidated    Boolean           @default(false)
  delivered      Boolean
  user           User?             @relation(fields: [userId], references: [id])
  attempt        Int               @default(0)
  success        Boolean           @default(false)
  createdAt      DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt      DateTime?         @db.Timestamptz(3)
  userId         BigInt?
}

model Gallery {
  id        BigInt    @id @default(autoincrement())
  userId    BigInt
  user      User      @relation(fields: [userId], references: [id])
  caption   String?
  imageSrc  Json
  sequence  Int?
  public    Boolean   @default(true)
  meta      Json?
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model HomeAttributeTitle {
  id                BigInt              @id @default(autoincrement())
  displayName       String
  optionType        optionTypeEnum      @default(CHECKBOX)
  required          Boolean             @default(false)
  active            Boolean             @default(true)
  sequence          Int?
  createdAt         DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime?           @updatedAt @db.Timestamptz(3)
  deletedAt         DateTime?           @db.Timestamptz(3)
  homeAttributeType HomeAttributeType[]
}

model HomeAttributeType {
  id                   BigInt             @id @default(autoincrement())
  slug                 String             @unique
  displayName          String
  icon                 String?
  homeAttributeTitleId BigInt
  title                HomeAttributeTitle @relation(fields: [homeAttributeTitleId], references: [id])
  active               Boolean            @default(true)
  sequence             Int?
  meta                 Json?
  createdAt            DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime?          @updatedAt @db.Timestamptz(3)
  deletedAt            DateTime?          @db.Timestamptz(3)
  HomeAttributes       HomeAttributes[]
}

model ProfileSkillType {
  id        BigInt    @id @default(autoincrement())
  title     String
  slug      String    @unique
  icon      String?
  active    Boolean   @default(true)
  sequence  Int?
  meta      Json?
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model ServicePetPreference {
  id         BigInt    @id @default(autoincrement())
  providerId BigInt    @unique
  provider   Provider  @relation(fields: [providerId], references: [id])
  petPerDay  Int       @default(1)
  smallDog   Boolean   @default(true)
  mediumDog  Boolean   @default(true)
  largeDog   Boolean   @default(true)
  giantDog   Boolean   @default(true)
  cat        Boolean   @default(true)
  createdAt  DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt  DateTime? @db.Timestamptz(3)
}

model CancellationPolicy {
  id         Int        @id @default(autoincrement())
  slug       String     @unique
  title      String
  time       Int        @default(0)
  percentage Float      @default(0)
  sequence   Int?
  details    String
  createdAt  DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime?  @updatedAt @db.Timestamptz(3)
  deletedAt  DateTime?  @db.Timestamptz(3)
  Provider   Provider[]
}

model Breeds {
  id        BigInt      @id @default(autoincrement())
  name      String
  petType   petTypeEnum
  sequence  Int?
  visible   Boolean     @default(true)
  createdAt DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt DateTime?   @updatedAt @db.Timestamptz(3)
  deletedAt DateTime?   @db.Timestamptz(3)
  petBreed  PetBreed[]
}

model Pet {
  id                             BigInt               @id @default(autoincrement())
  userId                         BigInt
  user                           User                 @relation(fields: [userId], references: [id])
  opk                            String               @unique
  name                           String
  type                           petTypeEnum
  weight                         Float
  weightUnit                     weightTypeEnum       @default(LBS)
  ageYear                        Int
  ageMonth                       Int
  dob                            DateTime?
  gender                         genderTypeEnum
  profile_image                  Json?
  microchipped                   Boolean?
  spayedOrNeutered               Boolean?
  houseTrained                   friendlyTypeEnum?
  houseTrainedAdditionalDetails  String?
  childFriendly                  friendlyTypeEnum?
  childFrinedlyAdditionalDetails String?
  dogFriendly                    friendlyTypeEnum?
  dogFrinedlyAdditionalDetails   String?
  catFriendly                    friendlyTypeEnum?
  catFrinedlyAdditionalDetails   String?
  about                          String?
  energyLevel                    energyLevelTypeEnum?
  feedingSchedule                String?
  feedingScheduleDetails         String?
  pottyBreakSchedule             String?
  pottyBreakScheduleDetails      String?
  canLeftAlone                   String?
  canLeftAloneDetails            String?
  pillMedication                 String?
  topicalMedication              String?
  injectionMedication            String?
  sitterInstructions             String?
  vetInfo                        String?
  visible                        Boolean              @default(true)
  meta                           Json?
  createdAt                      DateTime             @default(now()) @db.Timestamptz(3)
  updatedAt                      DateTime?            @updatedAt @db.Timestamptz(3)
  deletedAt                      DateTime?            @db.Timestamptz(3)
  petBreed                       PetBreed[]
  petGallery                     PetGallery[]
}

model PetBreed {
  id        BigInt    @id @default(autoincrement())
  petId     BigInt
  pet       Pet       @relation(fields: [petId], references: [id])
  breedId   BigInt
  breed     Breeds    @relation(fields: [breedId], references: [id])
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model PetGallery {
  id           BigInt    @id @default(autoincrement())
  petId        BigInt
  pet          Pet       @relation(fields: [petId], references: [id])
  imageSrc     Json
  caption      String?
  sequence     Int?
  responsive   Json?
  profileImage Boolean   @default(false)
  public       Boolean   @default(true)
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt    DateTime? @db.Timestamptz(3)
}

model ServiceRateType {
  id                  BigInt                @id @default(autoincrement())
  name                String
  slug                String
  icon                String?
  unitCurrency        String                @default("usd")
  unitLabel           String                @default("night")
  unit                Int                   @default(1)
  helpText            String?
  description         String?
  active              Boolean               @default(true)
  createdAt           DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime?             @updatedAt @db.Timestamptz(3)
  deletedAt           DateTime?             @db.Timestamptz(3)
  ServiceTypeHasRates ServiceTypeHasRates[]
  meta                Json?
}

model HomeAttributes {
  id                  BigInt            @id @default(autoincrement())
  providerId          BigInt
  provider            Provider          @relation(fields: [providerId], references: [id])
  homeAttributeTypeId BigInt
  homeAttributeType   HomeAttributeType @relation(fields: [homeAttributeTypeId], references: [id])
  createdAt           DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt           DateTime?         @db.Timestamptz(3)
}

model ServiceTypeHasRates {
  id                BigInt            @id @default(autoincrement())
  serviceTypeId     Int
  serviceRateTypeId BigInt
  ServiceType       ServiceType       @relation(fields: [serviceTypeId], references: [id])
  serviceRateType   ServiceRateType   @relation(fields: [serviceRateTypeId], references: [id])
  createdAt         DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt         DateTime?         @db.Timestamptz(3)
  ServiceHasRates   ServiceHasRates[]
}

model ServiceHasRates {
  id                    BigInt              @id @default(autoincrement())
  providerServicesId    BigInt
  serviceTypeHasRatesId BigInt
  amount                Float
  service               ProviderServices    @relation(fields: [providerServicesId], references: [id])
  serviceTypeRate       ServiceTypeHasRates @relation(fields: [serviceTypeHasRatesId], references: [id])
  createdAt             DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt             DateTime?           @updatedAt @db.Timestamptz(3)
  deletedAt             DateTime?           @db.Timestamptz(3)
}

model UserStripeCustomerAccount {
  id               BigInt    @id @default(autoincrement())
  userId           BigInt    @unique
  user             User      @relation(fields: [userId], references: [id])
  stripeCustomerId String
  email            String
  active           Boolean   @default(true)
  meta             Json?
  createdAt        DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt        DateTime? @db.Timestamptz(3)
}

model UserStripeCard {
  id                BigInt              @id @default(autoincrement())
  userId            BigInt
  user              User                @relation(fields: [userId], references: [id])
  stripeCardId      String
  brand             String?
  customerCountry   String?
  name              String?
  stripeCustomerId  String
  last4             String
  expMonth          Int
  expYear           Int
  funding           String?
  addressLine1      String?
  addressLine2      String?
  city              String?
  state             String?
  zipCode           String?
  countryId         Int?
  country           Country?            @relation(fields: [countryId], references: [id])
  active            Boolean             @default(true)
  isDefault         Boolean             @default(false)
  meta              Json?
  createdAt         DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime?           @updatedAt @db.Timestamptz(3)
  deletedAt         DateTime?           @db.Timestamptz(3)
  userSubscriptions UserSubscriptions[]
}

model AvailableDay {
  id                BigInt           @id @default(autoincrement())
  providerServiceId BigInt
  service           ProviderServices @relation(fields: [providerServiceId], references: [id])
  sat               Boolean          @default(false)
  sun               Boolean          @default(false)
  mon               Boolean          @default(false)
  tue               Boolean          @default(false)
  wed               Boolean          @default(false)
  thu               Boolean          @default(false)
  fri               Boolean          @default(false)
  createdAt         DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime?        @updatedAt @db.Timestamptz(3)
  deletedAt         DateTime?        @db.Timestamptz(3)
}

model Unavailability {
  id                  BigInt            @id @default(autoincrement())
  service             ProviderServices? @relation(fields: [serviceId], references: [id])
  serviceId           BigInt?
  date                DateTime          @db.Timestamptz(3)
  user                User              @relation(fields: [userId], references: [id])
  userId              BigInt
  allServicesInactive Boolean           @default(false)
  createdAt           DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt           DateTime?         @db.Timestamptz(3)
}

model Quiz {
  id        BigInt    @id @default(autoincrement())
  question  String
  options   Json[]
  answer    String
  active    Boolean   @default(true)
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model SubscriptionPlan {
  id                BigInt              @id @default(autoincrement())
  name              String
  slug              String
  displayName       String
  monthlyRate       Float
  annualRate        Float
  monthlyCropRate   Float?
  annualCropRate    Float?
  details           String?
  features          Json?
  active            Boolean             @default(true)
  sequence          Int?
  meta              Json?
  createdAt         DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime?           @updatedAt @db.Timestamptz(3)
  deletedAt         DateTime?           @db.Timestamptz(3)
  userSubscriptions UserSubscriptions[]
}

model UserSubscriptions {
  id                       BigInt                     @id @default(autoincrement())
  userId                   BigInt
  user                     User                       @relation(fields: [userId], references: [id])
  subscriptionPlanId       BigInt
  subscriptionPlan         SubscriptionPlan           @relation(fields: [subscriptionPlanId], references: [id])
  cardId                   BigInt?
  card                     UserStripeCard?            @relation(fields: [cardId], references: [id])
  subTotal                 Float                      @default(0)
  discount                 Float                      @default(0)
  total                    Float                      @default(0)
  currency                 String?
  currentPeriodStart       DateTime?                  @db.Timestamptz(3)
  currentPeriodEnd         DateTime?                  @db.Timestamptz(3)
  status                   userSubscriptionStatusEnum @default(INACTIVE)
  paymentStatus            String?
  src                      Json?
  meta                     Json?
  createdAt                DateTime                   @default(now()) @db.Timestamptz(3)
  updatedAt                DateTime?                  @updatedAt @db.Timestamptz(3)
  deletedAt                DateTime?                  @db.Timestamptz(3)
  userSubscriptionInvoices UserSubscriptionInvoices[]
}

model UserSubscriptionInvoices {
  id                 BigInt            @id @default(autoincrement())
  userId             BigInt
  user               User              @relation(fields: [userId], references: [id])
  userSubscriptionId BigInt
  userSubscription   UserSubscriptions @relation(fields: [userSubscriptionId], references: [id])
  piId               String
  clientSecret       String
  total              Float
  currency           String?
  paid               Boolean           @default(false)
  billingDate        DateTime          @db.Timestamptz(3)
  status             String
  src                Json?
  meta               Json?
  createdAt          DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt          DateTime?         @db.Timestamptz(3)
}
