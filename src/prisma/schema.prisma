// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum loginProvider {
  LOCAL
  FACEBOOK
  GOOGLE
}

enum otpType {
  EMAIL
  PHONE
}

enum otpGenerationType {
  FORGET_PASSWORD
  PHONE_VERIFICATION
  APPOINTMENT
}

enum petTypeEnum {
  DOG
  CAT
  ANY
}

enum backGroundCheckEnum {
  NONE
  BASIC
  ENHANCE
}

enum optionTypeEnum {
  CHECKBOX
  RADIO
  TEXT
}

enum subscriptionTypeEnum {
  BASIC
  GOLD
  PLATINUM
}

enum havePetsEnum {
  NOT_SELECTED
  YES
  NO
}

enum homeTypeEnum {
  NOT_SELECTED
  HOUSE
  APARTMENT
  FARM
}

enum yardTypeEnum {
  NOT_SELECTED
  FENCED
  UNFENCED
  NO_YARD
}

model User {
  id                     BigInt                @id @default(autoincrement())
  opk                    String                @unique
  email                  String                @unique
  emailVerified          Boolean?              @default(true)
  firstName              String
  lastName               String
  password               String?
  zipcode                String?
  image                  Json?
  loginProvider          loginProvider
  timezone               String?
  facebook               String?
  google                 Boolean?
  meta                   Json?
  contact                UserContact?
  emergencyContact       UserEmergencyContact?
  createdAt              DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime?             @updatedAt @db.Timestamptz(3)
  deletedAt              DateTime?             @db.Timestamptz(3)
  provider               Provider?
  basicInfo              BasicInfo?
  userEmergencyContactId Int?
  Otp                    Otp[]
  Gallery                Gallery[]
}

model UserContact {
  id         Int       @id @default(autoincrement())
  phone      String    @unique
  userId     BigInt    @unique
  user       User      @relation(fields: [userId], references: [id])
  verifiedAt DateTime? @db.Timestamptz(3)
  createdAt  DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime? @updatedAt @db.Timestamptz(3)
}

model UserEmergencyContact {
  id         Int       @id @default(autoincrement())
  name       String?
  phone      String?
  email      String?
  userId     BigInt    @unique
  user       User      @relation(fields: [userId], references: [id])
  verifiedAt DateTime? @db.Timestamptz(3)
  createdAt  DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime? @updatedAt @db.Timestamptz(3)
}

model Country {
  id           Int         @id @default(autoincrement())
  name         String
  code         String
  currency     String?
  currencyCode String?
  exchangeRate Float?
  alpha2       String?
  alpha3       String?
  meta         Json?
  createdAt    DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime?   @updatedAt @db.Timestamptz(3)
  deletedAt    DateTime?   @db.Timestamptz(3)
  basicInfo    BasicInfo[]
}

model ServiceType {
  id                              Int                @id @default(autoincrement())
  name                            String
  displayName                     String
  slug                            String             @unique
  description                     String?
  shortDescription                String?
  icon                            String
  active                          Boolean            @default(true)
  location                        String?
  petType                         petTypeEnum        @default(ANY)
  browsable                       Boolean            @default(true)
  start_date_selector_description String?
  end_date_selector_description   String?
  appRequired                     Boolean            @default(false)
  sequence                        Int?
  meta                            Json?
  createdAt                       DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt                       DateTime?          @updatedAt @db.Timestamptz(3)
  deletedAt                       DateTime?          @db.Timestamptz(3)
  providerServices                ProviderServices[]
}

model Provider {
  id               BigInt               @id @default(autoincrement())
  userId           BigInt               @unique
  user             User                 @relation(fields: [userId], references: [id])
  slug             String               @unique
  isApproved       Boolean              @default(false)
  havePets         havePetsEnum         @default(NOT_SELECTED)
  subscriptionType subscriptionTypeEnum @default(BASIC)
  quizPassed       Boolean              @default(false)
  photoSubmitted   Boolean              @default(false)
  backGroundCheck  backGroundCheckEnum  @default(NONE)
  latitude         Float?
  longitude        Float?
  meta             Json?
  createdAt        DateTime             @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime?            @updatedAt @db.Timestamptz(3)
  deletedAt        DateTime?            @db.Timestamptz(3)
  providerServices ProviderServices[]
  providerDetails  ProviderDetails?
}

model ProviderServices {
  id                     BigInt                 @id @default(autoincrement())
  serviceTypeId          Int
  serviceType            ServiceType            @relation(fields: [serviceTypeId], references: [id])
  providerId             BigInt
  provider               Provider               @relation(fields: [providerId], references: [id])
  slug                   String                 @unique
  isActive               Boolean                @default(true)
  isAway                 Boolean                @default(false)
  acceptsNewAppointments Boolean                @default(true)
  acceptsNewCustomers    Boolean                @default(true)
  isApproved             Boolean                @default(true)
  logStay                Boolean                @default(true)
  homeType               homeTypeEnum           @default(NOT_SELECTED)
  yardType               yardTypeEnum           @default(NOT_SELECTED)
  cancellationPolicyId   Int?
  cancellationPolicy     CancellationPolicy?    @relation(fields: [cancellationPolicyId], references: [id])
  meta                   Json?
  createdAt              DateTime               @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime?              @updatedAt @db.Timestamptz(3)
  deletedAt              DateTime?              @db.Timestamptz(3)
  servicePetPreference   ServicePetPreference[]
  serviceRates           ServiceRates[]
}

model BasicInfo {
  id               BigInt    @id @default(autoincrement())
  userId           BigInt    @unique
  user             User      @relation(fields: [userId], references: [id])
  dob              DateTime  @db.Date
  addressLine1     String
  addressLine2     String?
  street           String?
  city             String
  state            String
  zipCode          String
  countryId        Int
  country          Country   @relation(fields: [countryId], references: [id])
  latitude         Float?    @default(0)
  longitude        Float?    @default(0)
  detailsSubmitted Boolean   @default(false)
  meta             Json?
  createdAt        DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt        DateTime? @db.Timestamptz(3)
}

model ProviderDetails {
  id                     BigInt    @id @default(autoincrement())
  providerId             BigInt    @unique
  provider               Provider  @relation(fields: [providerId], references: [id])
  headline               String
  yearsOfExperience      Float
  dogsExperience         String?
  walkingExperience      String?
  requestedDogInfo       String?
  experienceDescription  String
  environmentDescription String
  scheduleDescription    String
  detailsSubmitted       Boolean   @default(false)
  meta                   Json?
  createdAt              DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt              DateTime? @db.Timestamptz(3)
}

model Otp {
  id             BigInt            @id @default(autoincrement())
  recipient      String
  code           String
  type           otpType
  generationType otpGenerationType
  expireAt       DateTime          @db.Timestamptz(3)
  invalidated    Boolean           @default(false)
  delivered      Boolean
  user           User?             @relation(fields: [userId], references: [id])
  attempt        Int               @default(0)
  success        Boolean           @default(false)
  createdAt      DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt      DateTime?         @db.Timestamptz(3)
  userId         BigInt?
}

model Gallery {
  id        BigInt    @id @default(autoincrement())
  userId    BigInt
  user      User      @relation(fields: [userId], references: [id])
  caption   String?
  imageSrc  Json
  sequence  Int?
  public    Boolean   @default(true)
  meta      Json?
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model HomeAttributeTitle {
  id                BigInt              @id @default(autoincrement())
  displayName       String
  optionType        optionTypeEnum      @default(CHECKBOX)
  required          Boolean             @default(false)
  active            Boolean             @default(true)
  sequence          Int?
  createdAt         DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime?           @updatedAt @db.Timestamptz(3)
  deletedAt         DateTime?           @db.Timestamptz(3)
  homeAttributeType HomeAttributeType[]
}

model HomeAttributeType {
  id                   BigInt             @id @default(autoincrement())
  slug                 String             @unique
  displayName          String
  icon                 String?
  homeAttributeTitleId BigInt
  title                HomeAttributeTitle @relation(fields: [homeAttributeTitleId], references: [id])
  active               Boolean            @default(true)
  sequence             Int?
  meta                 Json?
  createdAt            DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime?          @updatedAt @db.Timestamptz(3)
  deletedAt            DateTime?          @db.Timestamptz(3)
}

model ProfileSkillType {
  id        BigInt    @id @default(autoincrement())
  title     String
  slug      String    @unique
  icon      String?
  active    Boolean   @default(true)
  sequence  Int?
  meta      Json?
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model ServicePetPreference {
  id                 BigInt           @id @default(autoincrement())
  providerServicesId BigInt
  service            ProviderServices @relation(fields: [providerServicesId], references: [id])
  petPerDay          Int              @default(1)
  smallDog           Boolean          @default(true)
  mediumDog          Boolean          @default(true)
  largeDog           Boolean          @default(true)
  giantDog           Boolean          @default(true)
  cat                Boolean          @default(true)
  createdAt          DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime?        @updatedAt @db.Timestamptz(3)
  deletedAt          DateTime?        @db.Timestamptz(3)
}

model CancellationPolicy {
  id               Int                @id @default(autoincrement())
  slug             String             @unique
  title            String
  time             Int                @default(0)
  percentage       Float              @default(0)
  sequence         Int?
  details          String
  createdAt        DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime?          @updatedAt @db.Timestamptz(3)
  deletedAt        DateTime?          @db.Timestamptz(3)
  providerServices ProviderServices[]
}

model ServiceRates {
  id                 BigInt           @id @default(autoincrement())
  providerServicesId BigInt
  providerService    ProviderServices @relation(fields: [providerServicesId], references: [id])
  name               String
  slug               String
  icon               String?
  unitRate           Float            @default(0)
  unitCurrency       String           @default("usd")
  unitLabel          String           @default("night")
  unit               Int              @default(1)
  helpText           String?
  description        String?
  active             Boolean          @default(true)
  createdAt          DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime?        @updatedAt @db.Timestamptz(3)
  deletedAt          DateTime?        @db.Timestamptz(3)
}
