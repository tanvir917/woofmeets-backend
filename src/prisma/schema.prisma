// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fieldReference"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum loginProvider {
  LOCAL
  FACEBOOK
  GOOGLE
  APPLE
}

enum otpType {
  EMAIL
  PHONE
}

enum otpGenerationType {
  FORGET_PASSWORD
  PHONE_VERIFICATION
  APPOINTMENT
}

enum petTypeEnum {
  DOG
  CAT
  ANY
}

enum backGroundCheckEnum {
  NONE
  BASIC
  GOLD
  PLATINUM
}

enum optionTypeEnum {
  CHECKBOX
  RADIO
  TEXT
}

enum subscriptionTypeEnum {
  NONE
  BASIC
  GOLD
  PLATINUM
}

enum havePetsEnum {
  NOT_SELECTED
  YES
  NO
}

enum homeTypeEnum {
  NOT_SELECTED
  HOUSE
  APARTMENT
  FARM
  BUSINESS
}

enum yardTypeEnum {
  NOT_SELECTED
  FENCED
  UNFENCED
  NO_YARD
}

enum genderTypeEnum {
  MALE
  FEMALE
}

enum weightTypeEnum {
  KG
  LBS
}

enum friendlyTypeEnum {
  YES
  NO
  UNSURE
  DEPENDS
}

enum energyLevelTypeEnum {
  HIGH
  MODERATE
  LOW
}

enum userSubscriptionStatusEnum {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
}

enum userSubscriptionPackageTypeEnum {
  MONTHLY
  YEARLY
  HALF_YEARLY
}

enum miscellaneousPaymentsTypeEnum {
  DEFAULT_VERIFICATION
  OTHERS
}

enum appointmentStatusEnum {
  PENDING
  ACCEPTED
  PROPOSAL
  REJECTED
  CANCELLED
  PAID
  COMPLETED
}

enum appointmentLengthTypeEnum {
  WALK
  VISIT
  NONE
}

enum appointmentProposalEnum {
  PROVIDER
  USER
  NONE
}

enum clientSubscriptonsInvoiceStatus {
  draft
  open
  paid
  uncollectible
  void
  deleted
}

enum adminRoleEnum {
  SUPERADMIN
  ADMIN
}

enum cancelledByAppointmentEnum {
  PROVIDER
  USER
}

enum refundStatusEnum {
  PENDING
  REFUND
  REFUND_FAILED
}

model User {
  id                         BigInt                       @id @default(autoincrement())
  opk                        String                       @unique
  email                      String                       @unique
  emailVerified              Boolean?                     @default(true)
  firstName                  String
  lastName                   String
  password                   String?
  zipcode                    String?
  image                      Json?
  loginProvider              loginProvider
  timezone                   String?
  facebook                   String?
  appleAccountId             String?
  google                     Boolean?
  meta                       Json?
  contact                    UserContact?
  emergencyContact           UserEmergencyContact?
  createdAt                  DateTime                     @default(now()) @db.Timestamptz(3)
  updatedAt                  DateTime?                    @updatedAt @db.Timestamptz(3)
  deletedAt                  DateTime?                    @db.Timestamptz(3)
  provider                   Provider?
  basicInfo                  BasicInfo?
  userEmergencyContactId     Int?
  Otp                        Otp[]
  Gallery                    Gallery[]
  pet                        Pet[]
  userStripeCustomerAccount  UserStripeCustomerAccount?
  userStripeCard             UserStripeCard[]
  userSubscriptions          UserSubscriptions[]
  userSubscriptionInvoices   UserSubscriptionInvoices[]
  Unavailability             Unavailability[]
  AvailableDate              AvailableDate[]
  userBasicVerification      UserBasicVerification?
  miscellaneousPayments      MiscellaneousPayments[]
  appointment                Appointment[]
  admin                      Admin?
  userStripeConnectAccount   UserStripeConnectAccount?
  coupons                    Coupons[]
  couponUsers                CouponUsers[]
  couponTrack                CouponTrack[]
  review                     Review[]
  reviewedByUser             Review[]                     @relation("reviewedBy")
  reviewedForUser            Review[]                     @relation("reviewedFor")
  appointmentBillingPayments AppointmentBillingPayments[]
  userApplicationVersion     UserApplicationVersion?
}

model UserContact {
  id         Int       @id @default(autoincrement())
  phone      String    @unique
  userId     BigInt    @unique
  user       User      @relation(fields: [userId], references: [id])
  verifiedAt DateTime? @db.Timestamptz(3)
  createdAt  DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime? @updatedAt @db.Timestamptz(3)
}

model UserEmergencyContact {
  id         Int       @id @default(autoincrement())
  name       String?
  phone      String?
  email      String?
  userId     BigInt    @unique
  user       User      @relation(fields: [userId], references: [id])
  verifiedAt DateTime? @db.Timestamptz(3)
  createdAt  DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime? @updatedAt @db.Timestamptz(3)
}

model Country {
  id             Int              @id @default(autoincrement())
  name           String
  code           String
  currency       String?
  currencyCode   String?
  exchangeRate   Float?
  alpha2         String?
  alpha3         String?
  meta           Json?
  createdAt      DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime?        @updatedAt @db.Timestamptz(3)
  deletedAt      DateTime?        @db.Timestamptz(3)
  basicInfo      BasicInfo[]
  userStripeCard UserStripeCard[]
}

model ServiceType {
  id                              Int                   @id @default(autoincrement())
  name                            String
  displayName                     String
  slug                            String                @unique
  description                     String?
  shortDescription                String?
  icon                            String
  active                          Boolean               @default(true)
  location                        String?
  petType                         petTypeEnum           @default(ANY)
  browsable                       Boolean               @default(true)
  unitlabel                       String?
  start_date_selector_description String?
  end_date_selector_description   String?
  appRequired                     Boolean               @default(false)
  sequence                        Int?
  meta                            Json?
  createdAt                       DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt                       DateTime?             @updatedAt @db.Timestamptz(3)
  deletedAt                       DateTime?             @db.Timestamptz(3)
  providerServices                ProviderServices[]
  serviceTypeHasRate              ServiceTypeHasRates[]
}

model Provider {
  id                             BigInt                           @id @default(autoincrement())
  userId                         BigInt                           @unique
  user                           User                             @relation(fields: [userId], references: [id])
  slug                           String                           @unique
  isApproved                     Boolean                          @default(false)
  havePets                       havePetsEnum                     @default(NOT_SELECTED)
  subscriptionType               subscriptionTypeEnum             @default(NONE)
  quizPassed                     Boolean                          @default(false)
  photoSubmitted                 Boolean                          @default(false)
  backGroundCheck                backGroundCheckEnum              @default(NONE)
  latitude                       Float?
  longitude                      Float?
  homeType                       homeTypeEnum                     @default(NOT_SELECTED)
  yardType                       yardTypeEnum                     @default(NOT_SELECTED)
  cancellationPolicyId           Int?
  cancellationPolicy             CancellationPolicy?              @relation(fields: [cancellationPolicyId], references: [id])
  profileSubmitted               Boolean                          @default(false)
  meta                           Json?
  createdAt                      DateTime                         @default(now()) @db.Timestamptz(3)
  updatedAt                      DateTime?                        @updatedAt @db.Timestamptz(3)
  deletedAt                      DateTime?                        @db.Timestamptz(3)
  providerServices               ProviderServices[]
  providerDetails                ProviderDetails?
  ServicePetPreference           ServicePetPreference?
  HomeAttributes                 HomeAttributes[]
  providerSkills                 ProviderSkills[]
  providerCheckrCandidate        ProviderCheckrCandidate?
  zoomInfo                       ZoomInfo?
  appointment                    Appointment[]
  backgroundCheck                BackgroundCheck[]
  review                         Review[]
  appointmentBillingTransactions AppointmentBillingTransactions[]
}

model ProviderServices {
  id                     BigInt            @id @default(autoincrement())
  serviceTypeId          Int
  serviceType            ServiceType       @relation(fields: [serviceTypeId], references: [id])
  providerId             BigInt
  provider               Provider          @relation(fields: [providerId], references: [id])
  slug                   String            @unique
  isActive               Boolean           @default(false)
  isAway                 Boolean           @default(false)
  acceptsNewAppointments Boolean           @default(true)
  acceptsNewCustomers    Boolean           @default(true)
  isApproved             Boolean           @default(true)
  logStay                Boolean           @default(true)
  meta                   Json?
  createdAt              DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt              DateTime?         @db.Timestamptz(3)
  ServiceHasRates        ServiceHasRates[]
  pottyBreak             String?
  advanceNotice          Int               @default(0)
  fulltime               Boolean           @default(true)
  radius                 Int               @default(10)
  AvailableDay           AvailableDay[]
  Unavailabilty          Unavailability[]
  AvailableDate          AvailableDate[]
  appointment            Appointment[]
  providerServiceReview  Review[]
}

model BasicInfo {
  id               BigInt    @id @default(autoincrement())
  userId           BigInt    @unique
  user             User      @relation(fields: [userId], references: [id])
  dob              DateTime  @db.Date
  addressLine1     String
  addressLine2     String?
  street           String?
  city             String
  state            String
  zipCode          String
  countryId        Int
  country          Country   @relation(fields: [countryId], references: [id])
  latitude         Float?    @default(0)
  longitude        Float?    @default(0)
  detailsSubmitted Boolean   @default(false)
  meta             Json?
  createdAt        DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt        DateTime? @db.Timestamptz(3)
}

model ProviderDetails {
  id                     BigInt    @id @default(autoincrement())
  providerId             BigInt    @unique
  provider               Provider  @relation(fields: [providerId], references: [id])
  headline               String
  yearsOfExperience      Float
  dogsExperience         String?
  walkingExperience      String?
  requestedDogInfo       String?
  experienceDescription  String
  environmentDescription String
  scheduleDescription    String
  about                  String?
  detailsSubmitted       Boolean   @default(false)
  meta                   Json?
  createdAt              DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt              DateTime? @db.Timestamptz(3)
}

model Otp {
  id             BigInt            @id @default(autoincrement())
  recipient      String
  code           String
  type           otpType
  generationType otpGenerationType
  expireAt       DateTime          @db.Timestamptz(3)
  invalidated    Boolean           @default(false)
  delivered      Boolean
  user           User?             @relation(fields: [userId], references: [id])
  attempt        Int               @default(0)
  success        Boolean           @default(false)
  createdAt      DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt      DateTime?         @db.Timestamptz(3)
  userId         BigInt?
}

model Gallery {
  id        BigInt    @id @default(autoincrement())
  userId    BigInt
  user      User      @relation(fields: [userId], references: [id])
  caption   String?
  imageSrc  Json
  sequence  Int?
  public    Boolean   @default(true)
  meta      Json?
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model HomeAttributeTitle {
  id                BigInt              @id @default(autoincrement())
  displayName       String
  optionType        optionTypeEnum      @default(CHECKBOX)
  required          Boolean             @default(false)
  active            Boolean             @default(true)
  sequence          Int?
  createdAt         DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime?           @updatedAt @db.Timestamptz(3)
  deletedAt         DateTime?           @db.Timestamptz(3)
  homeAttributeType HomeAttributeType[]
}

model HomeAttributeType {
  id                   BigInt             @id @default(autoincrement())
  slug                 String             @unique
  displayName          String
  icon                 String?
  homeAttributeTitleId BigInt
  title                HomeAttributeTitle @relation(fields: [homeAttributeTitleId], references: [id])
  active               Boolean            @default(true)
  sequence             Int?
  meta                 Json?
  createdAt            DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime?          @updatedAt @db.Timestamptz(3)
  deletedAt            DateTime?          @db.Timestamptz(3)
  HomeAttributes       HomeAttributes[]
}

model ProfileSkillType {
  id             BigInt           @id @default(autoincrement())
  title          String
  slug           String           @unique
  icon           String?
  active         Boolean          @default(true)
  sequence       Int?
  meta           Json?
  createdAt      DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime?        @updatedAt @db.Timestamptz(3)
  deletedAt      DateTime?        @db.Timestamptz(3)
  providerSkills ProviderSkills[]
}

model ServicePetPreference {
  id         BigInt    @id @default(autoincrement())
  providerId BigInt    @unique
  provider   Provider  @relation(fields: [providerId], references: [id])
  petPerDay  Int       @default(1)
  smallDog   Boolean   @default(true)
  mediumDog  Boolean   @default(true)
  largeDog   Boolean   @default(true)
  giantDog   Boolean   @default(true)
  cat        Boolean   @default(true)
  createdAt  DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt  DateTime? @db.Timestamptz(3)
}

model CancellationPolicy {
  id                Int                 @id @default(autoincrement())
  slug              String              @unique
  title             String
  time              Int                 @default(0)
  percentage        Float               @default(0)
  sequence          Int?
  details           String
  createdAt         DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime?           @updatedAt @db.Timestamptz(3)
  deletedAt         DateTime?           @db.Timestamptz(3)
  Provider          Provider[]
  cancelAppointment CancelAppointment[]
}

model Breeds {
  id        BigInt      @id @default(autoincrement())
  name      String
  petType   petTypeEnum
  sequence  Int?
  visible   Boolean     @default(true)
  createdAt DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt DateTime?   @updatedAt @db.Timestamptz(3)
  deletedAt DateTime?   @db.Timestamptz(3)
  petBreed  PetBreed[]
}

model Pet {
  id                             BigInt               @id @default(autoincrement())
  userId                         BigInt
  user                           User                 @relation(fields: [userId], references: [id])
  opk                            String               @unique
  name                           String
  type                           petTypeEnum
  weight                         Float
  weightUnit                     weightTypeEnum       @default(LBS)
  ageYear                        Int
  ageMonth                       Int
  dob                            DateTime?
  gender                         genderTypeEnum
  profile_image                  Json?
  microchipped                   Boolean?
  spayedOrNeutered               Boolean?
  houseTrained                   friendlyTypeEnum?
  houseTrainedAdditionalDetails  String?
  childFriendly                  friendlyTypeEnum?
  childFrinedlyAdditionalDetails String?
  dogFriendly                    friendlyTypeEnum?
  dogFrinedlyAdditionalDetails   String?
  catFriendly                    friendlyTypeEnum?
  catFrinedlyAdditionalDetails   String?
  about                          String?
  energyLevel                    energyLevelTypeEnum?
  feedingSchedule                String?
  feedingScheduleDetails         String?
  pottyBreakSchedule             String?
  pottyBreakScheduleDetails      String?
  canLeftAlone                   String?
  canLeftAloneDetails            String?
  pillMedication                 String?
  topicalMedication              String?
  injectionMedication            String?
  sitterInstructions             String?
  vetInfo                        String?
  visible                        Boolean              @default(true)
  meta                           Json?
  createdAt                      DateTime             @default(now()) @db.Timestamptz(3)
  updatedAt                      DateTime?            @updatedAt @db.Timestamptz(3)
  deletedAt                      DateTime?            @db.Timestamptz(3)
  petBreed                       PetBreed[]
  petGallery                     PetGallery[]
  appointmentPet                 AppointmentPet[]
}

model PetBreed {
  id        BigInt    @id @default(autoincrement())
  petId     BigInt
  pet       Pet       @relation(fields: [petId], references: [id])
  breedId   BigInt
  breed     Breeds    @relation(fields: [breedId], references: [id])
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model PetGallery {
  id           BigInt    @id @default(autoincrement())
  petId        BigInt
  pet          Pet       @relation(fields: [petId], references: [id])
  imageSrc     Json
  caption      String?
  sequence     Int?
  responsive   Json?
  profileImage Boolean   @default(false)
  public       Boolean   @default(true)
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt    DateTime? @db.Timestamptz(3)
}

model ServiceRateType {
  id                  BigInt                @id @default(autoincrement())
  name                String
  slug                String
  icon                String?
  unitCurrency        String                @default("usd")
  unitLabel           String                @default("night")
  unit                Int                   @default(1)
  helpText            String?
  description         String?
  active              Boolean               @default(true)
  createdAt           DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime?             @updatedAt @db.Timestamptz(3)
  deletedAt           DateTime?             @db.Timestamptz(3)
  ServiceTypeHasRates ServiceTypeHasRates[]
  meta                Json?
}

model HomeAttributes {
  id                  BigInt            @id @default(autoincrement())
  providerId          BigInt
  provider            Provider          @relation(fields: [providerId], references: [id])
  homeAttributeTypeId BigInt
  homeAttributeType   HomeAttributeType @relation(fields: [homeAttributeTypeId], references: [id])
  createdAt           DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt           DateTime?         @db.Timestamptz(3)
}

model ServiceTypeHasRates {
  id                BigInt            @id @default(autoincrement())
  serviceTypeId     Int
  serviceRateTypeId BigInt
  ServiceType       ServiceType       @relation(fields: [serviceTypeId], references: [id])
  serviceRateType   ServiceRateType   @relation(fields: [serviceRateTypeId], references: [id])
  createdAt         DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt         DateTime?         @db.Timestamptz(3)
  ServiceHasRates   ServiceHasRates[]
}

model ServiceHasRates {
  id                    BigInt              @id @default(autoincrement())
  providerServicesId    BigInt
  serviceTypeHasRatesId BigInt
  amount                Float
  service               ProviderServices    @relation(fields: [providerServicesId], references: [id])
  serviceTypeRate       ServiceTypeHasRates @relation(fields: [serviceTypeHasRatesId], references: [id])
  createdAt             DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt             DateTime?           @updatedAt @db.Timestamptz(3)
  deletedAt             DateTime?           @db.Timestamptz(3)
}

model UserStripeCustomerAccount {
  id               BigInt    @id @default(autoincrement())
  userId           BigInt    @unique
  user             User      @relation(fields: [userId], references: [id])
  stripeCustomerId String
  email            String
  active           Boolean   @default(true)
  meta             Json?
  createdAt        DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt        DateTime? @db.Timestamptz(3)
}

model UserStripeCard {
  id                BigInt              @id @default(autoincrement())
  userId            BigInt
  user              User                @relation(fields: [userId], references: [id])
  stripeCardId      String
  brand             String?
  customerCountry   String?
  name              String?
  stripeCustomerId  String
  last4             String
  expMonth          Int
  expYear           Int
  funding           String?
  addressLine1      String?
  addressLine2      String?
  city              String?
  state             String?
  zipCode           String?
  countryId         Int?
  country           Country?            @relation(fields: [countryId], references: [id])
  active            Boolean             @default(true)
  isDefault         Boolean             @default(false)
  meta              Json?
  createdAt         DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime?           @updatedAt @db.Timestamptz(3)
  deletedAt         DateTime?           @db.Timestamptz(3)
  userSubscriptions UserSubscriptions[]
}

model AvailableDay {
  id                BigInt           @id @default(autoincrement())
  providerServiceId BigInt
  service           ProviderServices @relation(fields: [providerServiceId], references: [id])
  sat               Boolean          @default(false)
  sun               Boolean          @default(false)
  mon               Boolean          @default(false)
  tue               Boolean          @default(false)
  wed               Boolean          @default(false)
  thu               Boolean          @default(false)
  fri               Boolean          @default(false)
  createdAt         DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime?        @updatedAt @db.Timestamptz(3)
  deletedAt         DateTime?        @db.Timestamptz(3)
}

model Unavailability {
  id                  BigInt            @id @default(autoincrement())
  service             ProviderServices? @relation(fields: [serviceId], references: [id])
  serviceId           BigInt?
  date                DateTime          @db.Timestamptz(3)
  user                User              @relation(fields: [userId], references: [id])
  userId              BigInt
  allServicesInactive Boolean           @default(false)
  createdAt           DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt           DateTime?         @db.Timestamptz(3)
}

model Quiz {
  id        BigInt    @id @default(autoincrement())
  question  String
  options   Json[]
  answer    String
  active    Boolean   @default(true)
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

//! SubscriptionPlan model is deprecated for now and membership plan will be used instead
model SubscriptionPlan {
  id              BigInt    @id @default(autoincrement())
  name            String
  slug            String    @unique
  displayName     String
  monthlyRate     Float
  annualRate      Float
  monthlyCropRate Float?
  annualCropRate  Float?
  monthlyPriceId  String?
  annualPriceId   String?
  details         String?
  features        Json?
  active          Boolean   @default(true)
  sequence        Int?
  meta            Json?
  createdAt       DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt       DateTime? @db.Timestamptz(3)
}

model MembershipPlan {
  id                   BigInt                 @id @default(autoincrement())
  name                 String
  slug                 String                 @unique
  stripeProductId      String                 @unique
  displayName          String
  details              String?
  features             Json?
  active               Boolean                @default(true)
  sequence             Int?
  meta                 Json?
  createdAt            DateTime               @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime?              @updatedAt @db.Timestamptz(3)
  deletedAt            DateTime?              @db.Timestamptz(3)
  MembershipPlanPrices MembershipPlanPrices[]
}

model MembershipPlanPrices {
  id                BigInt              @id @default(autoincrement())
  membershipPlanId  BigInt
  membershipPlan    MembershipPlan      @relation(fields: [membershipPlanId], references: [id])
  stripePriceId     String              @unique
  rate              Float
  cropRate          Float?
  validity          Int                 @default(1)
  meta              Json?
  createdAt         DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime?           @updatedAt @db.Timestamptz(3)
  deletedAt         DateTime?           @db.Timestamptz(3)
  UserSubscriptions UserSubscriptions[]
}

model UserSubscriptions {
  id                       BigInt                     @id @default(autoincrement())
  userId                   BigInt
  user                     User                       @relation(fields: [userId], references: [id])
  membershipPlanPriceId    BigInt
  membershipPlanPrice      MembershipPlanPrices       @relation(fields: [membershipPlanPriceId], references: [id])
  cardId                   BigInt?
  card                     UserStripeCard?            @relation(fields: [cardId], references: [id])
  stripeSubscriptionId     String?                    @unique
  currency                 String?
  currentPeriodStart       DateTime?                  @db.Timestamptz(3)
  currentPeriodEnd         DateTime?                  @db.Timestamptz(3)
  status                   userSubscriptionStatusEnum
  paymentStatus            String?
  src                      Json?
  meta                     Json?
  errors                   Json?
  createdAt                DateTime                   @default(now()) @db.Timestamptz(3)
  updatedAt                DateTime?                  @updatedAt @db.Timestamptz(3)
  deletedAt                DateTime?                  @db.Timestamptz(3)
  userSubscriptionInvoices UserSubscriptionInvoices[]
}

model UserSubscriptionInvoices {
  id                 BigInt                          @id @default(autoincrement())
  userId             BigInt
  user               User                            @relation(fields: [userId], references: [id])
  userSubscriptionId BigInt                          @unique
  userSubscription   UserSubscriptions               @relation(fields: [userSubscriptionId], references: [id])
  stripeInvoiceId    String                          @unique
  customerStripeId   String?
  customerEmail      String?
  customerName       String?
  total              Float
  subTotal           Float
  amountDue          Float?
  amountPaid         Float?
  amountRemaining    Float?
  billingReason      String
  currency           String
  paid               Boolean                         @default(false)
  billingDate        DateTime?                       @db.Timestamptz(3)
  status             clientSubscriptonsInvoiceStatus
  invoicePdf         String?
  src                Json?
  meta               Json?
  createdAt          DateTime                        @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime?                       @updatedAt @db.Timestamptz(3)
  deletedAt          DateTime?                       @db.Timestamptz(3)
}

model ProviderSkills {
  id          BigInt           @id @default(autoincrement())
  providerId  BigInt
  provider    Provider         @relation(fields: [providerId], references: [id])
  skillTypeId BigInt
  skillType   ProfileSkillType @relation(fields: [skillTypeId], references: [id])
  createdAt   DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime?        @updatedAt @db.Timestamptz(3)
  deletedAt   DateTime?        @db.Timestamptz(3)
}

model AvailableDate {
  id        BigInt            @id @default(autoincrement())
  service   ProviderServices? @relation(fields: [serviceId], references: [id])
  serviceId BigInt?
  date      DateTime          @db.Timestamptz(3)
  user      User              @relation(fields: [userId], references: [id])
  userId    BigInt
  createdAt DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt DateTime?         @db.Timestamptz(3)
}

model UserBasicVerification {
  id        BigInt    @id @default(autoincrement())
  userId    BigInt    @unique
  user      User      @relation(fields: [userId], references: [id])
  dob       DateTime  @db.Date
  state     String?
  dlId      String?
  stateId   String?
  images    Json?
  meta      Json?
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model MiscellaneousPayments {
  id          BigInt                        @id @default(autoincrement())
  userId      BigInt
  user        User                          @relation(fields: [userId], references: [id])
  piId        String                        @unique
  chargeId    String?
  total       Float
  currency    String?
  paid        Boolean                       @default(false)
  billingDate DateTime?                     @db.Timestamptz(3)
  status      String
  type        miscellaneousPaymentsTypeEnum
  src         Json?
  meta        Json?
  createdAt   DateTime                      @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime?                     @updatedAt @db.Timestamptz(3)
  deletedAt   DateTime?                     @db.Timestamptz(3)
}

model ProviderCheckrCandidate {
  id                       BigInt                     @id @default(autoincrement())
  providerId               BigInt                     @unique
  provider                 Provider                   @relation(fields: [providerId], references: [id])
  candidateId              String                     @unique
  email                    String                     @unique
  firstName                String
  lastName                 String
  phone                    String?
  reportIds                Json?
  geoIds                   Json?
  adjugation               String?
  src                      Json?
  meta                     Json?
  createdAt                DateTime                   @default(now()) @db.Timestamptz(3)
  updatedAt                DateTime?                  @updatedAt @db.Timestamptz(3)
  deletedAt                DateTime?                  @db.Timestamptz(3)
  ProviderCheckrInvitation ProviderCheckrInvitation[]
  ProviderCheckrReport     ProviderCheckrReport[]
}

model ProviderCheckrInvitation {
  id                        BigInt                  @id @default(autoincrement())
  providerCheckrCandidateId BigInt
  providerCheckrCandidate   ProviderCheckrCandidate @relation(fields: [providerCheckrCandidateId], references: [id])
  invitationId              String                  @unique
  uri                       String?
  url                       String?
  status                    String
  package                   String
  reportId                  String?
  src                       Json?
  meta                      Json?
  createdAt                 DateTime                @default(now()) @db.Timestamptz(3)
  updatedAt                 DateTime?               @updatedAt @db.Timestamptz(3)
  deletedAt                 DateTime?               @db.Timestamptz(3)
}

model ProviderCheckrReport {
  id                        BigInt                  @id @default(autoincrement())
  providerCheckrCandidateId BigInt
  providerCheckrCandidate   ProviderCheckrCandidate @relation(fields: [providerCheckrCandidateId], references: [id])
  reportId                  String                  @unique
  status                    String
  result                    String?
  assessment                String?
  package                   String?
  adjudication              String?
  src                       Json?
  meta                      Json?
  createdAt                 DateTime                @default(now()) @db.Timestamptz(3)
  updatedAt                 DateTime?               @updatedAt @db.Timestamptz(3)
  deletedAt                 DateTime?               @db.Timestamptz(3)
}

model ZoomInfo {
  id           BigInt    @id @default(autoincrement())
  providerId   BigInt    @unique
  provider     Provider  @relation(fields: [providerId], references: [id])
  refreshToken String
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt    DateTime? @db.Timestamptz(3)
}

model Appointment {
  id                  BigInt                   @id @default(autoincrement())
  opk                 String                   @unique
  invoiceNumber       String?
  userId              BigInt
  user                User                     @relation(fields: [userId], references: [id])
  providerId          BigInt
  provider            Provider                 @relation(fields: [providerId], references: [id])
  providerServiceId   BigInt
  providerService     ProviderServices         @relation(fields: [providerServiceId], references: [id])
  status              appointmentStatusEnum
  lastStatusChangedBy appointmentProposalEnum?
  cancelReason        String?
  providerTimeZone    String?
  isRecurring         Boolean?                 @default(false)
  endOfLife           DateTime?                @db.Timestamptz(3)
  lastProposalId      BigInt?
  messageGroupId      String?
  createdAt           DateTime                 @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime?                @updatedAt @db.Timestamptz(3)
  deletedAt           DateTime?                @db.Timestamptz(3)
  appointmentProposal AppointmentProposal[]
  appointmentPet      AppointmentPet[]
  AppointmentDates    AppointmentDates[]
  couponTrack         CouponTrack[]
  review              Review[]
  billing             Billing[]
  cancelAppointment   CancelAppointment[]
  appointmentCard     AppointmentCard[]
}

model AppointmentProposal {
  id                       BigInt                    @id @default(autoincrement())
  appointmentId            BigInt
  appointment              Appointment               @relation(fields: [appointmentId], references: [id])
  proposedBy               appointmentProposalEnum
  original                 Boolean                   @default(false)
  countered                Boolean                   @default(false)
  appointmentserviceType   appointmentLengthTypeEnum
  length                   Float?
  additionalLengthPrice    Float?
  petsIds                  BigInt[]
  regularPrice             Float?
  additionalCharge         Json?
  providerExtraFee         Float?
  totalPrice               Float?
  priceCalculationDetails  Json?
  firstMessage             String?
  isRecivedPhotos          Boolean?
  dropOffStartTime         String?
  dropOffEndTime           String?
  pickUpStartTime          String?
  pickUpEndTime            String?
  proposalStartDate        String?
  appointmentStartDateTime DateTime?                 @db.Timestamptz(3)
  proposalEndDate          String?
  appointmentEndDateTime   DateTime?                 @db.Timestamptz(3)
  proposalOtherDate        Json[]
  proposalVisits           Json[]
  isRecurring              Boolean?
  recurringStartDate       DateTime                  @default(now()) @db.Timestamptz(3)
  skipRecurringStartDate   Boolean                   @default(true)
  recurringSelectedDay     String[]
  refundDetails            Json?
  meta                     Json?
  createdAt                DateTime                  @default(now()) @db.Timestamptz(3)
  updatedAt                DateTime?                 @updatedAt @db.Timestamptz(3)
  deletedAt                DateTime?                 @db.Timestamptz(3)
  appointmentPet           AppointmentPet[]
  AppointmentDates         AppointmentDates[]
}

model AppointmentDates {
  id                     BigInt              @id @default(autoincrement())
  date                   DateTime
  localDate              String?
  appointmentId          BigInt
  appointment            Appointment         @relation(fields: [appointmentId], references: [id])
  appointmentProposalId  BigInt
  appointmentProposal    AppointmentProposal @relation(fields: [appointmentProposalId], references: [id])
  day                    String
  isHoliday              Boolean
  holidayNames           String[]
  visitStartTimeString   String?
  visitStartInDateTime   DateTime?           @db.Timestamptz(3)
  visitEndTimeString     String?
  visitEndTimeInDateTime DateTime?           @db.Timestamptz(3)
  durationInMinutes      Int?
  paymentStatus          String              @default("PAID")
  startTime              DateTime?           @db.Timestamptz(3)
  stopTime               DateTime?           @db.Timestamptz(3)
  createdAt              DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime?           @updatedAt @db.Timestamptz(3)
  deletedAt              DateTime?           @db.Timestamptz(3)
  appointmentCard        AppointmentCard[]
}

model Holidays {
  id        BigInt    @id @default(autoincrement())
  title     String
  startDate String
  endDate   String
  timeZone  String
  meta      Json?
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)

  @@unique([startDate, endDate])
}

model AppointmentPet {
  id                  BigInt              @id @default(autoincrement())
  petId               BigInt
  pet                 Pet                 @relation(fields: [petId], references: [id])
  appointmentId       BigInt
  appointment         Appointment         @relation(fields: [appointmentId], references: [id])
  proposalId          BigInt
  appointmentProposal AppointmentProposal @relation(fields: [proposalId], references: [id])
  createdAt           DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime?           @updatedAt @db.Timestamptz(3)
  deletedAt           DateTime?           @db.Timestamptz(3)
}

model Admin {
  id        BigInt         @id @default(autoincrement())
  userId    BigInt         @unique
  user      User           @relation(fields: [userId], references: [id])
  role      adminRoleEnum?
  createdAt DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt DateTime?      @updatedAt @db.Timestamptz(3)
  deletedAt DateTime?      @db.Timestamptz(3)
}

model BackgroundCheck {
  id         BigInt              @id @default(autoincrement())
  providerId BigInt
  provider   Provider            @relation(fields: [providerId], references: [id])
  type       backGroundCheckEnum
  value      Int?
  meta       Json?
  createdAt  DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime?           @updatedAt @db.Timestamptz(3)
  deletedAt  DateTime?           @db.Timestamptz(3)
}

model UserStripeConnectAccount {
  id                 BigInt    @id @default(autoincrement())
  userId             BigInt    @unique
  user               User      @relation(fields: [userId], references: [id])
  stripeAccountId    String    @unique
  email              String    @unique
  country            String?
  defaultCurrency    String?
  detailsSubmitted   Boolean   @default(false)
  chargesEnabled     Boolean   @default(false)
  payoutsEnabled     Boolean   @default(false)
  capabilities       Json?
  requirements       Json?
  futureRequirements Json?
  type               String?
  src                Json?
  meta               Json?
  createdAt          DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt          DateTime? @db.Timestamptz(3)
}

model Coupons {
  id              BigInt        @id @default(autoincrement())
  code            String        @unique
  amount          Float?
  percentage      Float?
  minSpent        Float?
  maxCapPerUse    Float?
  maxLimitPerUser Int?
  totalUsed       Int?          @default(0)
  expiresAt       DateTime?     @db.Timestamptz(3)
  createdBy       BigInt?
  createdByUser   User?         @relation(fields: [createdBy], references: [id])
  isPublic        Boolean       @default(false)
  meta            Json?
  createdAt       DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime?     @updatedAt @db.Timestamptz(3)
  deletedAt       DateTime?     @db.Timestamptz(3)
  couponUsers     CouponUsers[]
  couponTrack     CouponTrack[]
}

model CouponUsers {
  id        BigInt    @id @default(autoincrement())
  couponId  BigInt
  coupon    Coupons   @relation(fields: [couponId], references: [id])
  userId    BigInt
  user      User      @relation(fields: [userId], references: [id])
  maxUse    Int?
  count     Int?
  meta      Json?
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model CouponTrack {
  id            BigInt      @id @default(autoincrement())
  couponId      BigInt
  coupon        Coupons     @relation(fields: [couponId], references: [id])
  userId        BigInt
  user          User        @relation(fields: [userId], references: [id])
  appointmentId BigInt
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  amount        Float       @default(0)
  meta          Json?
  createdAt     DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime?   @updatedAt @db.Timestamptz(3)
  deletedAt     DateTime?   @db.Timestamptz(3)
}

model Review {
  id                     BigInt            @id @default(autoincrement())
  userId                 BigInt?
  user                   User?             @relation(fields: [userId], references: [id])
  providerId             BigInt?
  provider               Provider?         @relation(fields: [providerId], references: [id])
  appointmentId          BigInt
  appointment            Appointment       @relation(fields: [appointmentId], references: [id])
  reviewedById           BigInt?
  reviewedByIdUser       User?             @relation(name: "reviewedBy", fields: [reviewedById], references: [id])
  reviewedForId          BigInt?
  reviewedForIdUser      User?             @relation(name: "reviewedFor", fields: [reviewedForId], references: [id])
  rating                 Float?
  comment                String?
  providerServiceId      BigInt?
  providerService        ProviderServices? @relation(fields: [providerServiceId], references: [id])
  providerServiceRating  Float?
  providerServiceComment String?
  reviewId               BigInt?
  meta                   Json?
  createdAt              DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt              DateTime?         @db.Timestamptz(3)
}

model Billing {
  id                             BigInt                           @id @default(autoincrement())
  appointmentId                  BigInt
  appointment                    Appointment                      @relation(fields: [appointmentId], references: [id])
  totalDayCount                  Int?
  subtotal                       Float?
  serviceCharge                  Float?
  serviceChargePercentage        Float?
  total                          Float?
  paid                           Boolean                          @default(false)
  paymentStatus                  String                           @default("unpaid")
  meta                           Json?
  createdAt                      DateTime                         @default(now()) @db.Timestamptz(3)
  updatedAt                      DateTime?                        @updatedAt @db.Timestamptz(3)
  deletedAt                      DateTime?                        @db.Timestamptz(3)
  appointmentBillingPayments     AppointmentBillingPayments[]
  appointmentBillingTransactions AppointmentBillingTransactions[]
}

model AppointmentBillingPayments {
  id           BigInt    @id @default(autoincrement())
  billingId    BigInt
  billing      Billing   @relation(fields: [billingId], references: [id])
  paidByUserId BigInt
  paidByUser   User      @relation(fields: [paidByUserId], references: [id])
  txnId        String?   @unique
  piId         String    @unique
  chargeId     String?
  amount       Float?
  status       String?
  billingDate  DateTime? @db.Timestamptz(3)
  payerEmail   String?
  currency     String?
  src          Json?
  meta         Json?
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt    DateTime? @db.Timestamptz(3)
}

model AppointmentBillingTransactions {
  id                 BigInt    @id @default(autoincrement())
  billingId          BigInt
  billing            Billing   @relation(fields: [billingId], references: [id])
  providerId         BigInt
  provider           Provider  @relation(fields: [providerId], references: [id])
  paidAmount         Float
  currency           String?   @default("usd")
  providerSubsStatus String?
  providerPercentage Float?
  providerAmount     Float?
  releaseDate        DateTime? @db.Timestamptz(3)
  releaseStatus      Boolean   @default(false)
  nextState          String?
  lockedAt           DateTime? @db.Timestamptz(3)
  state              String    @default("CUSTOMER_PAID")
  processingId       String?
  lockedReason       String?
  errors             Json?
  userRefundAmount   Float?
  meta               Json?
  createdAt          DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt          DateTime? @db.Timestamptz(3)
}

model CancelAppointment {
  id                                 BigInt                     @id @default(autoincrement())
  appointmentId                      BigInt
  appointment                        Appointment                @relation(fields: [appointmentId], references: [id])
  cancellationPolicyId               Int?
  cancellationPolicy                 CancellationPolicy?        @relation(fields: [cancellationPolicyId], references: [id])
  refundStatus                       refundStatusEnum           @default(PENDING)
  cancelledBy                        cancelledByAppointmentEnum
  paidTo                             appointmentProposalEnum
  dayRemainingBeforeAppointment      Int?
  userRefundAmount                   Float?
  userRefundPercentage               Float?
  providerRemainingAppointmentVisits Int?
  meta                               Json?
  createdAt                          DateTime                   @default(now()) @db.Timestamptz(3)
  updatedAt                          DateTime?                  @updatedAt @db.Timestamptz(3)
  deletedAt                          DateTime?                  @db.Timestamptz(3)
}

model BasicPayments {
  id        BigInt    @id @default(autoincrement())
  amount    Float
  active    Boolean   @default(true)
  meta      Json?
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}

model AppointmentCard {
  id                BigInt            @id @default(autoincrement())
  appointmentId     BigInt
  appointment       Appointment       @relation(fields: [appointmentId], references: [id])
  appointmentDateId BigInt?
  appointmentDates  AppointmentDates? @relation(fields: [appointmentDateId], references: [id])
  images            Json[]
  petsData          Json[]
  medication        String?
  additionalNotes   String?
  totalWalkTime     String?
  distance          Float?
  distanceUnit      String?           @default("mi")
  generateTime      DateTime?
  submitTime        DateTime?
  meta              Json?
  createdAt         DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime?         @updatedAt @db.Timestamptz(3)
  deletedAt         DateTime?         @db.Timestamptz(3)
}

model UserApplicationVersion {
  id        BigInt    @id @default(autoincrement())
  userId    BigInt    @unique
  user      User      @relation(fields: [userId], references: [id])
  version   String
  meta      Json?
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
}
